---
# GitHub Actions Workflow for All Things Linux Infrastructure Linting
# This workflow runs ansible-lint on pull requests and pushes to main branches

name: Ansible Lint

on:
  push:
    branches:
      - main
      - develop
      - "feature/*"
    paths:
      - "**.yml"
      - "**.yaml"
      - "ansible/playbooks/**"
      - "ansible/roles/**"
      - "ansible/inventories/**"
      - "ansible/group_vars/**"
      - "ansible/host_vars/**"
  pull_request:
    branches:
      - main
      - develop
    paths:
      - "**.yml"
      - "**.yaml"
      - "ansible/playbooks/**"
      - "ansible/roles/**"
      - "ansible/inventories/**"
      - "ansible/group_vars/**"
      - "ansible/host_vars/**"
  workflow_dispatch:
jobs:
  ansible-lint:
    name: Ansible Lint
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install

      - name: Load cached venv
        id: cached-uv-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('uv.lock') }}

      - name: Install dependencies
        if: steps.cached-uv-dependencies.outputs.cache-hit != 'true'
        run: uv sync

      - name: Install Ansible collections
        run: |
          uv run ansible-galaxy collection install -r ansible/requirements.yml

      - name: Run ansible-lint
        run: |
          uv run ansible-lint ansible/playbooks/ ansible/roles/ --format codeclimate

  yaml-syntax:
    name: YAML Syntax Check
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install PyYAML
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML

      - name: Check YAML syntax
        run: |
          find . -name "*.yml" -o -name "*.yaml" | grep -v ".git" | while read file; do
            echo "Checking $file..."
            python -c "import yaml; yaml.safe_load(open('$file'))"
          done

  security-scan:
    name: Security Scan
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  file-quality:
    name: File Quality Checks
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for trailing whitespace
        run: |
          if find . -name "*.yml" -o -name "*.yaml" -o -name "*.sh" | xargs grep -l '[[:space:]]$'; then
            echo "❌ Found files with trailing whitespace"
            exit 1
          else
            echo "✅ No trailing whitespace found"
          fi

      - name: Check file permissions
        run: |
          if find . -name "*.yml" -o -name "*.yaml" | xargs ls -la | grep '^-rwxr'; then
            echo "❌ Found executable YAML files"
            exit 1
          else
            echo "✅ YAML file permissions are correct"
          fi

      - name: Check for secrets
        run: |
          if grep -r -i -E "(password|secret|key|token)" --include="*.yml" --include="*.yaml" . | grep -v -E "(# |description|comment|example)"; then
            echo "❌ Potential secrets found in YAML files"
            echo "Please use Ansible Vault for sensitive data"
            exit 1
          else
            echo "✅ No obvious secrets found in plain text"
          fi

  deployment-test:
    name: Deployment Test (Dry Run)
    runs-on: ubuntu-24.04
    needs: [ansible-lint, yaml-syntax]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install

      - name: Load cached venv
        id: cached-uv-dependencies-deployment
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('uv.lock') }}

      - name: Install dependencies
        if: steps.cached-uv-dependencies-deployment.outputs.cache-hit != 'true'
        run: uv sync

      - name: Install Ansible collections
        run: |
          uv run ansible-galaxy collection install -r ansible/requirements.yml

      - name: Test playbook syntax
        run: |
          uv run ansible-playbook --syntax-check ansible/playbooks/site.yml

      - name: Test dynamic inventory parsing
        run: |
          chmod +x ansible/inventories/dynamic.py
          uv run ./ansible/inventories/dynamic.py --list > /dev/null

      - name: Validate deployment CLI
        run: |
          uv run python -m scripts.cli --help > /dev/null
          uv run python -m scripts.cli infra --help > /dev/null
          uv run python -m scripts.cli infra plan --help > /dev/null
