---
# Pre-commit hooks configuration
# Optimized to complement CI workflows without duplication

default_install_hook_types: [pre-commit, commit-msg]
default_stages: [pre-commit]

ci:
  autofix_commit_msg: "fix: auto-fixes from pre-commit.ci"
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "chore: pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip:
    - ansible-lint
  submodules: false

repos:
  # === COMMIT MESSAGE FORMATTING ===
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.4.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args:
          [
            --types=build,
            chore,
            ci,
            docs,
            feat,
            fix,
            perf,
            refactor,
            revert,
            style,
            test,
            --scopes=ansible,
            terraform,
            scripts,
            docs,
            ci,
            security,
            monitoring,
            infrastructure,
            --optional-scopes,
            --strict,
          ]

  # === SECURITY SCANNING ===
  # Light security checks for local development
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.21.2
    hooks:
      - id: gitleaks
        name: gitleaks (secrets detection)
        description: Detect hardcoded secrets
        args: ["--verbose", "--redact"]

  # === GENERAL CODE QUALITY ===
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--multi, --unsafe]
      - id: check-added-large-files
        args: [--maxkb=10240]
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: mixed-line-ending
        args: [--fix=lf]
      - id: check-toml
      - id: check-json

  # === YAML LINTING ===
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.37.0
    hooks:
      - id: yamllint
        name: yamllint (YAML linting)
        description: Lint YAML files
        args: [-c=.yamllint.yml]
        types: [yaml]

  # === SHELL SCRIPTS ===
  - repo: https://github.com/scop/pre-commit-shfmt
    rev: v3.10.0-1
    hooks:
      - id: shfmt
        name: shfmt (shell formatting)
        description: Format shell scripts
        args: [-w, -s, -i=2]

  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        name: shellcheck (shell linting)
        description: Lint shell scripts
        args: [-e, SC1091, -e, SC2034]

  # === ANSIBLE ===
  # Note: Pre-commit only lints task/handler files for speed
  # Full ansible-lint runs in CI and via `scripts/cli.py lint`
  - repo: local
    hooks:
      - id: ansible-lint-fast
        name: ansible-lint (fast)
        description: Fast Ansible linting for pre-commit (tasks/handlers only)
        entry: bash -c 'for file in "$@"; do echo "Linting $file"; uv run ansible-lint --config-file=.ansible-lint "$file" || exit 1; done' --
        language: system
        files: ^ansible/(roles/.*/tasks|roles/.*/handlers)/.*\.(yml|yaml)$
        pass_filenames: true

  # === TERRAFORM ===
  - repo: https://github.com/antonbabenko/pre-commit-terraform
    rev: v1.99.0
    hooks:
      - id: terraform_fmt
        name: terraform fmt
        description: Format Terraform files

      - id: terraform_validate
        name: terraform validate
        description: Validate Terraform files
        args:
          - --args=-json
          - --args=-no-color

      - id: terraform_tflint
        name: terraform tflint
        description: Lint Terraform files
        args:
          - --args=--config=__GIT_WORKING_DIR__/.tflint.hcl
          - --args=--disable-rule=terraform_unused_declarations

      - id: terraform_docs
        name: terraform docs
        description: Update Terraform documentation
        args:
          - --hook-config=--path-to-file=README.md
          - --hook-config=--add-to-existing-file=true
          - --hook-config=--create-file-if-not-exist=true

  # === PYTHON ===
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.8.4
    hooks:
      - id: ruff
        name: ruff (Python linting)
        description: Lint Python files with Ruff
        args: [--fix, --exit-non-zero-on-fix]

      - id: ruff-format
        name: ruff format (Python formatting)
        description: Format Python files with Ruff

  # === MARKDOWN & DOCS ===
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.43.0
    hooks:
      - id: markdownlint
        name: markdownlint
        description: Lint Markdown files
        args: [--fix, --disable, MD013, MD033, MD041]
        files: \.md$

  # === FINAL VALIDATION ===
  # Quick validation that complements CI without duplicating heavy checks
  - repo: local
    hooks:
      - id: project-structure-check
        name: project structure validation
        description: Validate project structure and critical files
        entry: python3
        language: system
        args:
          - -c
          - |
            import os
            import sys

            # Critical files that must exist
            critical_files = [
                'terraform/main.tf',
                'ansible.cfg',
                'configs/domains.yml',
                'configs/environments.yml',
                'pyproject.toml'
            ]

            missing = [f for f in critical_files if not os.path.exists(f)]
            if missing:
                print(f"❌ Critical files missing: {', '.join(missing)}")
                sys.exit(1)

            # Check for common issues
            issues = []

            # Check if secrets.example.yml exists but secrets.yml doesn't
            if os.path.exists('configs/secrets.example.yml') and not os.path.exists('configs/secrets.yml'):
                issues.append("⚠️  configs/secrets.yml missing (copy from secrets.example.yml)")

            # Check if .env files are ignored
            if os.path.exists('.env'):
                issues.append("⚠️  .env file found - ensure it's in .gitignore")

            if issues:
                print('\n'.join(issues))
                print("\n✅ Project structure validation passed with warnings")
            else:
                print("✅ Project structure validation passed")

        files: ^(terraform/|ansible/|configs/|pyproject\.toml|\.gitignore)
        pass_filenames: false
        always_run: false
