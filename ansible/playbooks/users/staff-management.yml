---
# Staff Management Playbook for All Things Linux
# This playbook manages staff user accounts, SSH keys, and permissions

- name: "All Things Linux Staff Management"
  hosts: all
  become: true
  gather_facts: true
  vars:
    staff_home_dir: "/home"
    ssh_key_dir: "{{ staff_home_dir }}/.ssh"
    audit_log: "/var/log/atl/staff-management.log"

  pre_tasks:
    - name: Create audit log directory
      ansible.builtin.file:
        path: /var/log/atl
        state: directory
        mode: "0755"

    - name: Initialize audit log
      ansible.builtin.lineinfile:
        path: "{{ audit_log }}"
        line: "{{ ansible_date_time.iso8601 }} - Staff management started by {{ ansible_user_id }}"
        create: true
        mode: "0644"

  tasks:
    # Create system groups for different access levels
    - name: Create staff access groups
      ansible.builtin.group:
        name: "{{ item.key }}"
        state: present
      loop: "{{ staff_roles | dict2items }}"

    - name: Create service-specific groups
      ansible.builtin.group:
        name: "{{ item }}"
        state: present
      loop:
        - atl-web
        - atl-database
        - atl-discord
        - atl-wiki
        - atl-tools
        - atl-monitoring
        - atl-backup

    # Create staff user accounts based on roles
    - name: Create staff user accounts
      ansible.builtin.user:
        name: "{{ item.username }}"
        groups: "{{ item.role }},{{ item.service_groups | default([]) | join(',') }}"
        shell: /bin/bash
        create_home: true
        state: present
      loop: "{{ active_staff_members | default([]) }}"
      when: active_staff_members is defined

    # SSH Key Management
    - name: Create SSH directories for staff
      ansible.builtin.file:
        path: "{{ staff_home_dir }}/{{ item.username }}/.ssh"
        state: directory
        owner: "{{ item.username }}"
        group: "{{ item.username }}"
        mode: "0700"
      loop: "{{ active_staff_members | default([]) }}"
      when: active_staff_members is defined

    - name: Deploy SSH public keys for staff
      ansible.posix.authorized_key:
        user: "{{ item.username }}"
        key: "{{ item.ssh_public_key }}"
        state: present
        exclusive: true
      loop: "{{ active_staff_members | default([]) }}"
      when:
        - active_staff_members is defined
        - item.ssh_public_key is defined

    # Configure sudo access based on roles
    - name: Configure sudo access for administrators
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/atl-admins
        line: "%administrator ALL=(ALL) NOPASSWD:ALL"
        create: true
        mode: "0440"
        validate: "visudo -cf %s"

    - name: Configure sudo access for systems administrators
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/atl-systems
        line: "%systems_administrator ALL=(ALL) NOPASSWD:ALL"
        create: true
        mode: "0440"
        validate: "visudo -cf %s"

    - name: Configure limited sudo access for assistant administrators
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/atl-assistants
        line: "%assistant_administrator ALL=(ALL) NOPASSWD:/bin/systemctl restart *, /bin/systemctl status *, /bin/systemctl
          reload *, /usr/bin/docker *"
        create: true
        mode: "0440"
        validate: "visudo -cf %s"

    # Service-specific permissions
    - name: Configure web server access
      ansible.builtin.user:
        name: "{{ item.username }}"
        groups: "atl-web,www-data"
        append: true
      loop: "{{ active_staff_members | default([]) }}"
      when:
        - active_staff_members is defined
        - "'web_servers' in item.ssh_access | default([])"
        - inventory_hostname in groups['web_servers'] | default([])

    - name: Configure database access
      ansible.builtin.user:
        name: "{{ item.username }}"
        groups: "atl-database,postgres"
        append: true
      loop: "{{ active_staff_members | default([]) }}"
      when:
        - active_staff_members is defined
        - "'database_servers' in item.ssh_access | default([])"
        - inventory_hostname in groups['database_servers'] | default([])

    - name: Configure Docker access for developers
      ansible.builtin.user:
        name: "{{ item.username }}"
        groups: "docker"
        append: true
      loop: "{{ active_staff_members | default([]) }}"
      when:
        - active_staff_members is defined
        - item.role in ['python_developer', 'fullstack_developer', 'backend_developer']
        - "'docker' in services | default([])"

    # Access Control Lists for directories
    - name: Set up application directory permissions
      ansible.posix.acl:
        path: "/opt/atl"
        entity: "{{ item.key }}"
        etype: group
        permissions: "{{ 'rwx' if item.value.sudo_access else 'rx' }}"
        state: present
      loop: "{{ staff_roles | dict2items }}"

    - name: Set up log directory access
      ansible.posix.acl:
        path: "/var/log/atl"
        entity: "{{ item.key }}"
        etype: group
        permissions: "r"
        state: present
      loop: "{{ staff_roles | dict2items }}"
      when: "'monitoring' in item.value.services_access or 'all' in item.value.services_access"

    # SSH Configuration per role
    - name: Configure SSH access restrictions
      ansible.builtin.blockinfile:
        path: /etc/ssh/sshd_config
        marker: "# {mark} ATL Staff SSH Config"
        block: |
          # All Things Linux Staff SSH Configuration
          Match Group administrator,systems_administrator
              AllowUsers *

          Match Group moderator,creative_director,graphic_designer,pixel_artist
              AllowUsers *
              ForceCommand /usr/local/bin/atl-restricted-shell

          # Audit all SSH logins
          Match User *
              LogLevel VERBOSE
        backup: true
      notify: Restart ssh

    # Create restricted shell for limited access users
    - name: Create restricted shell script
      ansible.builtin.copy:
        dest: /usr/local/bin/atl-restricted-shell
        mode: "0755"
        content: |
          #!/bin/bash
          # Restricted shell for ATL staff with limited access

          echo "Welcome to All Things Linux Infrastructure"
          echo "You have limited access to this system."
          echo "Available commands: ls, pwd, cat (logs only), tail (logs only)"
          echo "======================================================"

          while true; do
              read -p "atl-restricted> " cmd args
              case $cmd in
                  ls)
                      ls $args 2>/dev/null || echo "Access denied"
                      ;;
                  pwd)
                      pwd
                      ;;
                  cat)
                      if [[ $args == /var/log/atl/* ]]; then
                          cat $args
                      else
                          echo "Access denied: Can only read ATL logs"
                      fi
                      ;;
                  tail)
                      if [[ $args == /var/log/atl/* ]]; then
                          tail $args
                      else
                          echo "Access denied: Can only read ATL logs"
                      fi
                      ;;
                  help)
                      echo "Available commands: ls, pwd, cat (logs only), tail (logs only), exit"
                      ;;
                  exit)
                      break
                      ;;
                  *)
                      echo "Command not allowed: $cmd"
                      ;;
              esac
          done

    # Audit and logging
    - name: Set up staff access audit
      ansible.builtin.cron:
        name: "ATL Staff Access Audit"
        minute: "0"
        hour: "*/6"
        job: "/usr/local/bin/atl-audit-staff-access.sh"
        user: root

    - name: Create staff access audit script
      ansible.builtin.copy:
        dest: /usr/local/bin/atl-audit-staff-access.sh
        mode: "0755"
        content: |
          #!/bin/bash
          # Staff access audit script for All Things Linux

          AUDIT_LOG="/var/log/atl/staff-access-audit.log"
          DATE=$(date '+%Y-%m-%d %H:%M:%S')

          echo "$DATE - Starting staff access audit" >> $AUDIT_LOG

          # Check active sessions
          who >> $AUDIT_LOG

          # Check recent logins
          echo "Recent logins:" >> $AUDIT_LOG
          last -n 20 >> $AUDIT_LOG

          # Check sudo usage
          echo "Recent sudo usage:" >> $AUDIT_LOG
          grep sudo /var/log/auth.log | tail -20 >> $AUDIT_LOG

          echo "$DATE - Staff access audit completed" >> $AUDIT_LOG

    # Cleanup and final tasks
    - name: Remove inactive staff accounts
      ansible.builtin.user:
        name: "{{ item.username }}"
        state: absent
        remove: true
      loop: "{{ inactive_staff_members | default([]) }}"
      when: inactive_staff_members is defined

    - name: Log staff management completion
      ansible.builtin.lineinfile:
        path: "{{ audit_log }}"
        line: "{{ ansible_date_time.iso8601 }} - Staff management completed successfully"

  handlers:
    - name: Restart ssh
      ansible.builtin.service:
        name: ssh
        state: restarted
