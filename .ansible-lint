---
# Ansible Lint Configuration
# https://ansible.readthedocs.io/projects/lint/configuring/
#
# This configuration aligns with the project-local ansible.cfg setup
# Used by both pre-commit hooks and GitHub Actions CI/CD

# Profile - basic for development, production for CI
# Can be overridden with --profile flag in CI
profile: basic

# Exclude paths from linting (aligned with ansible.cfg project-local structure)
exclude_paths:
  - .ansible/ # Project-local Ansible data (collections, roles, cache, plugins)
  - .cache/ # General cache directory
  - .github/ # GitHub workflows and templates
  - .venv/ # Python virtual environment
  - site/ # Generated documentation (MkDocs)
  - logs/ # Log files (ansible.log goes here per ansible.cfg)
  - tmp/ # Temporary files
  - terraform/ # Terraform infrastructure (not Ansible)
  - docs/ # Documentation source files
  - scripts/ # Python CLI scripts (not Ansible)
  - monitoring/ # Monitoring configuration templates
  - configs/ # Configuration files (not playbooks)
  - vagrant.yml # Vagrant configuration
  - Vagrantfile # Vagrant configuration
  - uv.lock # Python dependency lock file
  - pyproject.toml # Python project configuration

# Kinds of files to lint (aligned with ansible.cfg inventory and roles structure)
kinds:
  - yaml: "**/*.{yaml,yml}"
  - playbook: "ansible/playbooks/**/*.{yml,yaml}"
  - role: "ansible/roles/*/tasks/*.{yml,yaml}"
  - vars: "ansible/{group_vars,host_vars}/**/*.{yml,yaml}"
  - inventory: "ansible/inventories/**/*.{yml,yaml}"
  - requirements: "ansible/requirements.yml"

# Rules to skip globally (development-friendly)
skip_list:
  - yaml[line-length] # Allow longer lines for readability
  - name[casing] # Allow flexible task naming conventions
  - name[template] # Allow Jinja2 template-based task names
  - package-latest # Allow latest packages in development
  - risky-file-permissions # Allow flexible file permissions in development
  - no-changed-when # Allow tasks without changed_when in development
  - command-instead-of-shell # Allow command module usage
  - risky-shell-pipe # Allow shell pipes for Docker and complex commands

# Rules to warn about but not fail on (educational)
warn_list:
  - name[missing] # Warn about missing task names
  - experimental # Warn about experimental features
  - fqcn[action] # Warn about non-FQCN action names
  - yaml[comments] # Warn about YAML comment formatting

# Performance and behavior settings
offline: true # Use offline mode (aligned with pre-commit --offline)
write_list: [] # Don't auto-fix files
skip_action_validation: false # Validate actions (important for accuracy)
strict: false # Don't fail on warnings (development-friendly)

# Variable naming pattern (snake_case)
var_naming_pattern: "^[a-z_][a-z0-9_]*$"

# Task naming - encourage descriptive names
task_name_prefix: ""

# Loop variable pattern to avoid conflicts with role variables
loop_var_prefix: "^(__|{role}_)"

# Use default ansible-lint rules as baseline
use_default_rules: true

# Verbosity for local development (CI can override)
verbosity: 0

# Mock modules and roles for testing (if needed)
mock_modules: []
mock_roles: []

# Enable/disable specific rule categories
enable_list:
  - fqcn-builtins # Encourage FQCN for built-in modules
  - no-log-password # Ensure passwords are not logged

# Custom rules directory (if we add any)
rulesdir: []

# Exclude specific tags from linting (if needed)
tags: []
