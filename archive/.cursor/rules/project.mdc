# All Things Linux Infrastructure Project Rules

You are an expert in the All Things Linux infrastructure project, specializing in Terraform, Ansible, Python CLI development, and practical DevOps automation. This is a production infrastructure-as-code monorepo for a 501(c)(3) non-profit organization managing infrastructure for 10,000+ community members.

## 🏗️ Project Overview

### Core Philosophy

- **Single Source of Truth**: `domains.yml` defines all infrastructure and services
- **Unified CLI**: All operations through the `atl` command-line tool
- **Infrastructure as Code**: Terraform for provisioning, Ansible for configuration
- **Multi-Environment**: Development, staging, and production environments
- **Community-Focused**: Reliable infrastructure for Linux community services

### Technology Stack

- **Infrastructure**: Terraform with Hetzner Cloud + Cloudflare providers
- **Configuration**: Ansible with dynamic inventory and reusable roles
- **CLI**: Python 3.10+ with uv, Rich, and Click
- **Documentation**: MkDocs with Material theme
- **Monitoring**: Prometheus + Grafana (planned/simple setup)

## 🔧 Current Project Structure

```text
infra/
├── configs/
│   ├── domains.yml              # Single source of truth
│   ├── environments.yml         # Environment definitions
│   └── secrets.example.yml      # Secrets template
├── terraform/
│   ├── main.tf                  # Providers and core resources
│   ├── variables.tf             # Variable definitions
│   ├── outputs.tf               # Outputs for Ansible
│   └── environments/            # Environment-specific configs
├── ansible/
│   ├── ansible.cfg              # Ansible configuration
│   ├── inventories/dynamic.py   # Dynamic inventory
│   ├── playbooks/               # Deployment playbooks
│   └── roles/                   # Reusable roles (system, docker, tux)
├── scripts/
│   ├── cli.py                   # Main CLI entry point
│   ├── commands/                # CLI command implementations
│   └── common/                  # Shared utilities
└── docs/                        # MkDocs documentation
```

## 🐍 Python CLI Patterns

### CLI Command Structure

The project uses a well-organized CLI with command groups:

```python
# Main CLI groups
atl infra    # Infrastructure management (plan, apply, destroy, check)
atl quality  # Code quality (lint with ansible-lint)
atl docs     # Documentation (build, serve, diagrams)
atl utils    # Utilities (update-collections, cleanup-logs)

# Quick access commands
atl plan     # Equivalent to 'atl infra plan'
atl apply    # Equivalent to 'atl infra apply'
atl lint     # Equivalent to 'atl quality lint'
```

### Command Implementation Pattern

```python
@cli.group(name="infra")
def infra():
    """Infrastructure management commands (Terraform + Ansible)"""
    pass

@infra.command()
@click.option("--environment", "-e", default="development")
@click.option("--verbose", "-v", is_flag=True)
@click.option("--dry-run", "-d", is_flag=True)
def plan(environment, verbose, dry_run):
    """Plan infrastructure changes"""
    # Implementation with rich output
    pass
```

### Rich Console Usage

```python
from rich.console import Console
console = Console()

# Use rich for beautiful output
console.print("✅ Success message", style="green")
console.print("⚠️  Warning message", style="yellow")
console.print("❌ Error message", style="red")
```

## 📋 Configuration Management

### domains.yml Structure

The single source of truth for all infrastructure:

```yaml
domains:
  atl_services:
    enabled: true
    required: true
    domain: "atl.services"
    server:
      type: "cx31"
      location: "ash"
      count: 1
    services:
      - nginx-proxy-manager
      - authentik
      - grafana
    network:
      subnet: "172.20.0.0/16"
      ip: "10.0.1.10"
    monitoring:
      enabled: true
      critical: true

global:
  environment: "production"
  project_name: "allthingslinux"
  default_user: "ansible"
  monitoring_enabled: true
  cloudflare_proxy: true
```

### Environment-Specific Configuration

```yaml
# environments.yml
environments:
  development:
    domain_suffix: ".dev.allthingslinux.org"
    server_defaults:
      type: "cx21"
  staging:
    domain_suffix: ".staging.allthingslinux.org"
  production:
    domain_suffix: ""
```

## 🏗️ Terraform Patterns

### Provider Configuration

```hcl
terraform {
  required_version = ">= 1.0"
  required_providers {
    hcloud = {
      source  = "hetznercloud/hcloud"
      version = "~> 1.45"
    }
    cloudflare = {
      source  = "cloudflare/cloudflare"
      version = "~> 5.6"
    }
  }
}

provider "hcloud" {
  token = var.hcloud_token  # From environment: TF_VAR_hcloud_token
}

provider "cloudflare" {
  api_token = var.cloudflare_api_token  # From environment: TF_VAR_cloudflare_api_token
}
```

### Resource Naming Convention

```hcl
# Pattern: ${project_name}-${environment}-${resource_type}
resource "hcloud_server" "main" {
  name = "${var.project_name}-${var.environment}-server"

  labels = {
    project     = var.project_name
    environment = var.environment
    managed_by  = "terraform"
  }
}
```

### Network and Security

```hcl
# Standard firewall rules
resource "hcloud_firewall" "main" {
  name = "${var.project_name}-${var.environment}-firewall"

  # SSH access
  rule {
    direction  = "in"
    port       = "22"
    protocol   = "tcp"
    source_ips = var.allowed_ssh_ips
  }

  # HTTP/HTTPS
  rule {
    direction  = "in"
    port       = "80"
    protocol   = "tcp"
    source_ips = ["0.0.0.0/0", "::/0"]
  }

  # Internal network
  rule {
    direction  = "in"
    protocol   = "tcp"
    port       = "any"
    source_ips = [var.network_cidr]
  }
}
```

## 📋 Ansible Patterns

### Configuration Standards

```ini
# ansible.cfg
[defaults]
inventory = inventories/dynamic.py
roles_path = roles
collections_path = .ansible/collections
stdout_callback = yaml
host_key_checking = False
remote_user = ansible
private_key_file = ~/.ssh/atl_infrastructure
gathering = smart
forks = 10
```

### Role Structure

```yaml
# roles/system/tasks/main.yml
---
- name: system | Install system packages
  ansible.builtin.include_tasks: subtasks/packages.yml
  tags:
    - system
    - packages

# Always use descriptive task names with role prefix
# Always use fully qualified collection names (ansible.builtin.*)
# Always use tags for selective execution
```

### Playbook Organization

```yaml
# playbooks/site.yml
---
- name: "Bootstrap Infrastructure"
  import_playbook: infrastructure/bootstrap.yml

- name: "Deploy Services"
  import_playbook: services/deploy.yml

- name: "Configure Monitoring"
  import_playbook: monitoring/configure.yml
```

### Variable Management

```yaml
# group_vars/all.yml
---
project_name: "{{ global.project_name | default('allthingslinux') }}"
environment: "{{ global.environment | default('production') }}"
default_user: "{{ global.default_user | default('ansible') }}"

# Use ansible-vault for sensitive data
# ansible-vault encrypt_string 'secret_value' --name 'variable_name'
```

## 🔧 Development Workflow

### Linting and Validation

```bash
# Primary linting command
atl lint

# Manual Ansible linting
ansible-lint ansible/playbooks/ ansible/roles/ ansible/tasks/ --profile=production

# Terraform validation
terraform fmt -check -recursive terraform/
terraform validate
```

### Testing Commands

```bash
# Plan infrastructure changes
atl plan --environment development

# Apply with auto-approval
atl apply --environment development --auto-approve

# Lint with auto-fix
atl lint --fix

# Generate documentation
atl docs build --serve
```

### Git Workflow

```bash
# Use conventional commits
git commit -m "feat(ansible): add monitoring role for prometheus

- Add prometheus server configuration
- Include grafana dashboard setup
- Configure alerting rules
- Update firewall rules for monitoring ports

Closes #123"
```

## 🔒 Security Practices

### Secrets Management

- **Terraform**: Use environment variables (`TF_VAR_*`)
- **Ansible**: Use `configs/secrets.yml` (gitignored) with ansible-vault
- **Never commit secrets** to version control
- **Use ansible-vault** for additional encryption

### SSH and Access

```yaml
# Standard SSH configuration
ssh:
  pubkey_auth: true
  password_auth: false
  root_login: false
  max_auth_tries: 3
```

### Firewall Defaults

```yaml
firewall:
  default_policy: "deny"
  logging: true
  allowed_ports:
    tcp: [80, 443]
    udp: []
```

## 📊 Monitoring and Observability

### Current Monitoring Setup

```yaml
# Basic monitoring configuration
monitoring:
  prometheus:
    retention_time: "15d"
    scrape_interval: "15s"
  grafana:
    admin_user: "admin"
  logging:
    driver: "loki"
    level: "INFO"
```

### Health Checks

```bash
# Check infrastructure status
atl status

# Validate connectivity
ansible all -i inventories/dynamic.py -m ping

# Run health checks
ansible-playbook -i inventories/dynamic.py playbooks/validation/health-check.yml
```

## 📚 Documentation Patterns

### MkDocs Configuration

```yaml
# mkdocs.yml
site_name: "All Things Linux Infrastructure"
theme:
  name: material
  features:
    - navigation.tabs
    - navigation.sections
    - toc.integrate
    - search.suggest
    - content.code.annotate
```

### Documentation Structure

```markdown
# docs/
├── index.md                    # Main documentation
├── guides/                     # How-to guides
│   ├── development.md          # Development workflow
│   └── deployment.md           # Deployment guide
├── infrastructure/             # Infrastructure docs
│   └── overview.md             # Architecture overview
└── reference/                  # Reference materials
    ├── commands.md             # CLI command reference
    └── configuration.md        # Configuration reference
```

## 🎯 Key Conventions

### Project Standards

1. **Single Source of Truth**: Always use `domains.yml` for infrastructure config
2. **Unified CLI**: All operations through `atl` command with rich output
3. **Consistent Naming**: `${project_name}-${environment}-${resource_type}`
4. **Environment Variables**: Use `TF_VAR_*` for Terraform secrets
5. **Ansible Vault**: Encrypt sensitive Ansible variables
6. **Conventional Commits**: Use conventional commit format
7. **Rich Output**: Use Rich library for beautiful CLI output
8. **Comprehensive Tags**: Label all resources with project, environment, managed_by
9. **Dynamic Inventory**: Generate Ansible inventory from Terraform outputs
10. **Idempotent Operations**: All scripts and playbooks safely re-runnable

### CLI Command Patterns

```bash
# Standard command structure
atl <group> <command> [options]

# Quick access for common operations
atl plan                        # Infrastructure planning
atl apply                       # Infrastructure deployment
atl lint                        # Code quality checks

# Environment-specific operations
atl plan --environment staging
atl apply --environment production --auto-approve
```

### Error Handling

```python
# Use rich for error display
try:
    result = execute_operation()
    console.print("✅ Operation completed successfully", style="green")
except Exception as e:
    console.print(f"❌ Operation failed: {e}", style="red")
    raise click.ClickException(f"Operation failed: {e}")
```

### File Organization

- **Configuration**: Store in `configs/` directory
- **Scripts**: Organize in `scripts/commands/` by function
- **Documentation**: Use MkDocs in `docs/` directory
- **Logs**: Store in `logs/` directory (gitignored)
- **Secrets**: Use `configs/secrets.yml` (gitignored)

## 🚀 Deployment Patterns

### Standard Deployment Flow

1. **Validate**: `atl lint` - Check code quality
2. **Plan**: `atl plan --environment <env>` - Preview changes
3. **Apply**: `atl apply --environment <env>` - Deploy infrastructure
4. **Verify**: Check services and connectivity
5. **Monitor**: Verify monitoring and alerting

### Environment Management

- **Development**: `terraform/environments/development/`
- **Staging**: `terraform/environments/staging/`
- **Production**: `terraform/environments/production/`

### Service Deployment

```yaml
# Standard service deployment pattern
- name: "Deploy {{ service_name }}"
  docker_compose:
    project_src: "{{ docker_compose_dir }}/{{ service_name }}"
    state: present
    env_file: "{{ service_env_file }}"
  tags:
    - services
    - "{{ service_name }}"
```

This ruleset focuses on the actual patterns, conventions, and practices used in the All Things Linux infrastructure project. It provides practical guidance for working with the existing codebase while maintaining the project's standards and conventions.
