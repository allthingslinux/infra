#!/bin/bash
# Emergency Access Script
# Minimal implementation using standard patterns

set -e

# Configuration
LOG_FILE="/var/log/emergency_access.log"
TIMEOUT_HOURS=4

# Logging function
log_event() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Check authorization
check_authorization() {
    local user="$1"
    local authorized_users=("alex" "sarah")

    for authorized in "${authorized_users[@]}"; do
        if [[ "$user" == "$authorized" ]]; then
            return 0
        fi
    done
    return 1
}

# Grant emergency access
grant_emergency_access() {
    local user="$1"
    local reason="$2"

    log_event "EMERGENCY ACCESS GRANTED - User: $user, Reason: $reason"

    # Grant temporary sudo access
    echo "$user ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/emergency_access

    # Set timeout to remove access
    (
        sleep $((TIMEOUT_HOURS * 3600))
        log_event "EMERGENCY ACCESS EXPIRED - User: $user"
        sed -i "/^$user ALL=(ALL) NOPASSWD:ALL$/d" /etc/sudoers.d/emergency_access
    ) &

    echo "Emergency access granted to $user for $TIMEOUT_HOURS hours"
    echo "Reason: $reason"
}

# Main execution
main() {
    local current_user=$(whoami)
    local reason="$1"

    if [[ -z "$reason" ]]; then
        echo "Usage: $0 <reason_for_emergency_access>"
        exit 1
    fi

    if ! check_authorization "$current_user"; then
        log_event "UNAUTHORIZED EMERGENCY ACCESS ATTEMPT - User: $current_user"
        echo "ERROR: User $current_user is not authorized for emergency access"
        exit 1
    fi

    grant_emergency_access "$current_user" "$reason"
}

main "$@"
